Как работает manuelbastionlab:

Все виды гуманоидов описываются двумя категориями:
templates и characters

template:
    label:              название шаблона
    description:        текст с описанием
    name:               общая часть названий файлов
    template_model:     ????
    template_polygons:  ????
character:
    label:              название шаблона
    description:        текст с описанием
    name:               общая часть названий файлов
    texture_diffuse:    текстура
    texture_displacement:текстура
    morphs_extra_file,
    shared_morphs_file,
    shared_morphs_extra_file: морфы
    proportions_folder: ????
    presets_folder:     ????
    measures_file:      ????
    bounding_boxes_file:????
    joints_base_file:   анимация
    joints_offset_file: анимация
    transformations_file:анимация
    vertexgroup_base_file:анимация
    vertexgroup_muscle_file:анимация

__init__.py:
38: В начале она создает объект Humanoid,
72: и пытается найти в сцене блендера данные своего объекта.
    если нашла, использует их, если не нашла, создает заново

80: мы ничего не знаем про блендер, поэтому у нас будет
    is_obj[0] = "NO_OBJ"
81: хз откуда она берет character_identifier, но он должен
    содержаться в characters_config.json:"character_list"

    данные гуманоида сохраняются в
    mblab_humanoid.characters_config[character_identifier]
    поэтому мы будем использовать @character как конкретную
    конфигурация

82: obj = algorithms.import_object_from_lib(lib_filepath, base_model_name, character_identifier)
    использует @character.template_model, @character

algoritms.py:
1390:сразу идет сюда:
    append_object_from_library(lib_filepath, [@character.template_model])
1416:попробуем прикинуть на примере какого-нибудь characterа f_ca01
    это будет "template_model": "MBLab_human_female"
    и сука ж ты блядь, оно походу в блендеровском файле,
    потому что я его не вижу в упор в других файлах.

    suffix = None, поэтому

    with bpy.data.libraries.load(lib_filepath) as (data_from, data_to):
        names_to_append = obj_names
        data_to.objects = [name for name in names_to_append if name in data_from.objects]

    name for name if name хуями. ёбаные питоньи ребусы.

    [ expression for item in list if conditional ]
    This is equivalent to:
    for item in list:
        if conditional:
            expression

    for(name in names_to_append):
        if (name in data_from.objects):
            data_to.objects.append(name)

1431:далее что-то там линкуют. возвращаются в прошлу функцию и там возвращают
    АХ ТЫ ЕБАНЫЙ НАХУЙ БЛЯДЬ! БЛЕНДЕР НАОТРЕЗ ОТКАЗЫВАЕТСЯ
    ЭКСПОРТИРОВАТЬ ОБЪЕКТЫ С КОМАНДНОЙ СТРОКИ. ПИДОРАСЫ!



__init.py__:
83: для инициализации гуманоида будут использоваться следующие
    параметры:

    rigging_type = enum {base, ik, muscle, muscle_ik}
        для muscle требуется character.vertexgroup_muscle_file
        для ik требуется character.joints_offset_file
    obj.name         = ????
    obj.manuellab_id = @character
    obj.manuellab_rig= @rigging_type

algorithms.py:
1390:import_object_from_lib(lib_filepath, name, final_name = None, stop_import = True):
    import_object_from_lib(@character.template_model, @character)
    вызывает
1403:append_object_from_library(lib_filepath, [name])
    append_object_from_library([@character.template_model])

1416:походу оно пытается из блендеровского файла загрузить данные о
    уже добавленых объектах. пусть у нас нет блендеровского файла

    будем считать что ничего тут не добавится
__init__.py
88: тогда мы ничего не загрузим и тут,
97: и придём вот сюда.
    mblab_humanoid.init_database(obj,character_identifier,rigging_type)
humanoid.py:
183:init_database(self,obj,character_identifier,rigging_type):
    obj.name         = ???? (from blender file)
    obj.manuellab_id = @character
    obj.manuellab_rig= @rigging_type
    character_identifier=@character
    rigging_type     = @rigging_type

    humanoid.sk_engine = SkeletonEngine(obj, @character, @rigging_type);
    humanoid.morph_engine = MorphingEngine(obj.name, @character);
    humanoid.mat_engine = MaterialEngine(obj.name, @character);

morphengine.py:
25: humanoid.morph_engine.obj_name=obj.name;
    humanoid.morph_engine.final_form=[]
    humanoid.morph_engine.cache_form=[]
    используются следующие файлы:
        vertices                vertices/@character.name+"_verts.json"
        expressions             expressions_morphs/@character.name+"_exprs.json"
        morph                   morphs/@character.name+"_morphs.json"
        extra_morph             morphs/@character.morphs_extra_file
        shared_morph            morphs/@character.shared_morphs_file
        shared_morph_extra      morphs/@character.shared_morphs_extra_file
        bodies                  antropometry/@character.proportions_folder
        measures                measures/@character.measures_file
        bounding_box            bboxes/@character.bounding_boxes_file
        presets                 presets/@character.presets_folder

85: humanoid.morph_engine.measures_database_exis = isdir(bodies) & isfile(measures)
105:init_final_form()
    humanoid.morph_engine.final_form <== obj.data.co.copy()
    obj=bpy.data.objects[obj.name]

    что-то попахивает пиздецом.

106:humanoid.morph_engine.base_form = vertices/@character.name+"_verts.json"

    дальше начинается какой-то пиздец. сука блядь
    что ж ты изверг наворотил своими граблями.

    self.load_morphs_database(self.shared_morph_data_path)
    self.load_morphs_database(self.morph_data_path)
    self.load_morphs_database(self.extra_morph_data_path) #Call this after the loading of shared morph is important for overwrite data.
    if self.shared_morph_extra_data_path:
        self.load_morphs_database(self.shared_morph_extra_data_path)
    self.load_morphs_database(self.expressions_path)

163:m_data = {morphs/@character.shared_morphs_file,
              morphs/@character.name+"_morphs.json",
              morphs/@character.morphs_extra_file,
              morphs/@character.shared_morphs_extra_file};

    добавляются данные:
    humanoid.morph_engine.morph_data[name]=vector{i,x,y,z}
    humanoid.morph_engine.morph_values[name]=0.0
    humanoid.morph_engine.morph_modified_verts=set{i}

114:self.load_bboxes_database(self.bounding_box_path)
    FIXME: add bboxes!!!

115:self.load_measures_database(self.measures_data_path)
153:humanoid.morph_engine ........ measures/@character.measures_file
    .measures_data          =      .["measures"];
    .measures_relat_data    =      .["relations"];
    .measures_score_weights =      .["score_weights"];
    .body_height_Z_parts    =      .["body_height_Z_parts"]

117:self.calculate_measures()
197:for(x in .measures_data)
        indices = x[];
        axis    = nameof(x).last();
207:и дальше просто складываем длины либо вдоль осей либо по длине.
    (algorithms.py:94)



    p1 = round(measures["buttock_girth"]/measures["body_height_Z"],4)
    p2 = round(measures["chest_girth"]/measures["body_height_Z"],4)
    p3 = round(measures["waist_girth"]/measures["body_height_Z"],4)
    p4 = round(measures["upperarm_axillary_girth"]/measures["body_height_Z"],4)
    p5 = round(measures["upperleg_top_girth"]/measures["body_height_Z"],4)
    humanoid.morph_engine.proportion_index = [p1,p2,p3,p4,p5]


humanoid.py:
296:obj.name состоит из нескольких частей, разделенных _:
    if (obj.name[0][0...3] not in "BasisAsymTest")
        obj.name[0] может быть "Basi"(s?)|"Asym"|"Test"
        при этом функция init_character_data ничего не делает
302:obj.name состоит из трех частей: AAA_BBB_CCC
    AAA = имя категории. если его нет, оно добавляется в
    humanoid.categories[AAA]=HumanCategory(AAA)

310:AAA_BBB это модификатор, он добавляется в категорию.
    сука что за бред!
    humanoid.categories[AAA]=HumanCategory(AAA)
    humanoid.categories[AAA].modifiers[]=HumanModifier(AAA_BBB, obj.name)

316:obj.name это на самом деле AAA_B1-B2-Bn_CCC
    prop[n]=AAA_Bn
    они добавляются в modifier
    humanoid.categories[AAA]=HumanCategory(AAA)
    humanoid.categories[AAA].modifiers[]=HumanModifier(AAA_BBB, obj.name)
    humanoid.categories[AAA].modifiers[AAA_BBB].properties[]=AAA_Bn;
    humanoid.character_data[AAA_Bn]=0.5

    что это за безумная хуйня?????


